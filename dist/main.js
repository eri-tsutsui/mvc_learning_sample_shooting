!function(t){var e={};function s(i){if(e[i])return e[i].exports;var h=e[i]={i:i,l:!1,exports:{}};return t[i].call(h.exports,h,h.exports,s),h.l=!0,h.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var h in t)s.d(i,h,function(e){return t[e]}.bind(null,h));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);class i extends EventTarget{constructor(){super(),this.targets=[],this.context={}}startAnimationFrame(t){this.canvas=t,this.context=t.getContext("2d"),requestAnimationFrame(()=>{this.render()})}render(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.targets.forEach(t=>{t.draw(this.context),t.update()}),requestAnimationFrame(()=>{this.render()})}addTargets(t){this.targets.push(t),console.log("[add]",t.constructor.name)}removeTargets(t){this.targets=this.targets.filter(e=>e!==t),console.log("[remove]",t.constructor.name)}}var h=new i;class r extends EventTarget{constructor(){super(),h.addTargets(this)}update(){}draw(t){}destroy(){h.removeTargets(this)}}class a extends r{constructor(){super(),this.HP=0,this.x=0,this.y=0,this.width=0,this.height=0}draw(t){}setHP(t){this.HP=t,this.HP<=0&&this.dispatchEvent(new Event("death"))}setDamage(t){this.HP-=t}setWidth(t){this.width=t}setHeight(t){this.height=t}}class n extends EventTarget{getHitObjectByClassName(t,e){let s=null;const i=h.targets.filter(t=>t.constructor.name===e);for(let e=0;e<i.length;e++){const h=i[e];if(this.hitRect(t,h)){h.dispatchEvent(new CustomEvent("hitRect",{detail:t})),s=h;break}}return s}hitOther(t){let e=!1;return h.targets.filter(e=>t!==e).some(s=>(e=this.hitRect(t,s),e)),e}hitX(t,e){return t.x+t.width/2>e.x&&t.x-t.width/2<e.x}hitY(t,e){return t.y+t.height/2>e.y&&t.y-t.height/2<e.y}hitRect(t,e){return this.hitX(t,e)&&this.hitY(t,e)}}var o=new n;class d extends r{constructor(t,e){super(),this.x=t,this.y=e,this.damage=10,this.addEventListener("hitRect",(t,e)=>{console.log("hit",t.detail),this.destroy()})}setSpeed(t){this.speed=t}setVector(t,e){}setDamage(t){this.damage=t}update(){this.x+=this.speed}draw(t){t.beginPath(),t.arc(this.x,this.y,2,0*Math.PI/180,360*Math.PI/180,!1),t.fillStyle="rgba(255, 255, 0, 1)",t.fill(),t.stroke()}}class l extends a{constructor(){super(),this.x=100,this.y=200,this.moveSpeed=5,this.isLeft=!1,this.isRight=!1,this.isUp=!1,this.isDown=!1,this.throwBullet=!1,this.setHP(100),this.setWidth(40),this.setHeight(40),window.addEventListener("keyup",t=>this.keyup(t)),window.addEventListener("keydown",t=>this.keydown(t))}keyup(t){const e=t.keyCode;37===e&&(this.isLeft=!1),38===e&&(this.isUp=!1),39===e&&(this.isRight=!1),40===e&&(this.isDown=!1),32===e&&(this.throwBullet=!1)}keydown(t){const e=t.keyCode;37===e&&(this.isLeft=!0),38===e&&(this.isUp=!0),39===e&&(this.isRight=!0),40===e&&(this.isDown=!0),32===e&&(this.throwBullet=!0)}death(){this.destroy()}update(){if(this.isLeft&&(this.x-=this.moveSpeed),this.isRight&&(this.x+=this.moveSpeed),this.isUp&&(this.y-=this.moveSpeed),this.isDown&&(this.y+=this.moveSpeed),!0===this.throwBullet){new d(this.x+50,this.y).setSpeed(7),this.throwBullet=!1}const t=o.getHitObjectByClassName(this,"Bullet");t&&(this.setDamage(t.damage),this.HP<=0&&(this.dispatchEvent(new Event("currentHP")),this.death()))}draw(t){t.beginPath(),t.moveTo(this.x-20,this.y+10),t.lineTo(this.x+20,this.y),t.lineTo(this.x-20,this.y-10),t.closePath(),t.strokeStyle="rgb(0,0,0)",t.stroke(),t.fillStyle="rgba(0,0,255, 1)",t.fill()}}class c extends r{constructor(){super(),this.score=0,this.isGameOver=!1,this.isClearGame=!1}addScore(t){this.score+=t}setScore(t){this.score=t}showGameOver(){this.isGameOver=!0}showClearGame(){this.isClearGame=!0}draw(t){t.font="bold 9px 'ゴシック'",t.fillStyle="rgb(255, 169, 0)",t.fillText("SCORE : "+this.score,10,10),!0===this.isGameOver&&(t.font="bold 30px 'ゴシック'",t.fillText("GAME OVER",200,200)),!0===this.isClearGame&&(t.font="bold 30px 'ゴシック'",t.fillText("Clear GAME",200,200))}}class u extends a{constructor(){super(),this.x=400,this.y=200,this.setHP(5),this.setWidth(40),this.setHeight(40),this.crashScore=10,this.nId=setInterval(()=>{new d(this.x-40,this.y).setSpeed(-4)},400)}update(){this.deg=this.deg||0,this.y=3*Math.cos(this.deg*(Math.PI/180))+this.y,this.deg++;const t=o.getHitObjectByClassName(this,"Bullet");t&&(this.setDamage(t.damage),this.HP<=0&&(this.dispatchEvent(new Event("death")),this.disappear(),this.stopBullet()),this.dispatchEvent(new CustomEvent("addScore",{detail:this.crashScore})))}disappear(){this.destroy()}stopBullet(){clearInterval(this.nId)}draw(t){t.beginPath(),t.arc(this.x,this.y,20,0*Math.PI/180,360*Math.PI/180,!1),t.fillStyle="rgba(255,0,0,0.8)",t.fill(),t.strokeStyle="purple",t.lineWidth=8,t.stroke()}}class p extends u{constructor(){super(),this.x=400,this.y=200,this.setHP(5),this.setWidth(40),this.setHeight(40),this.crashScore=10,clearInterval(this.nId),this.nId=setInterval(()=>{new d(this.x-40,this.y).setSpeed(-4)},400)}update(){this.deg=this.deg||0,this.y=.8*Math.cos(this.deg*(Math.PI/180))+this.y,this.deg++;const t=o.getHitObjectByClassName(this,"Bullet");t&&(this.setDamage(t.damage),this.HP<=0&&(this.dispatchEvent(new Event("death")),this.disappear(),this.stopBullet()),this.dispatchEvent(new CustomEvent("addScore",{detail:this.crashScore})))}disappear(){this.destroy()}stopBullet(){clearInterval(this.nId)}draw(t){t.beginPath(),t.arc(this.x,this.y,20,0*Math.PI/180,360*Math.PI/180,!1),t.fillStyle="rgba(0,0,0,1)",t.fill(),t.strokeStyle="purple",t.lineWidth=8,t.stroke()}}class g extends u{constructor(){super(),this.x=400,this.y=200,this.setHP(30),this.setWidth(40),this.setHeight(40),this.crashScore=30,clearInterval(this.nId),this.nId=setInterval(()=>{new d(this.x-40,this.y).setSpeed(-8)},200)}update(){this.deg=this.deg||0,this.y=5*Math.cos(this.deg*(Math.PI/180))+this.y,this.deg++;const t=o.getHitObjectByClassName(this,"Bullet");t&&(this.setDamage(t.damage),this.HP<=0&&(this.dispatchEvent(new Event("death")),this.disappear(),this.stopBullet()),this.dispatchEvent(new CustomEvent("addScore",{detail:this.crashScore})))}disappear(){this.destroy()}stopBullet(){clearInterval(this.nId)}draw(t){t.beginPath(),t.arc(this.x,this.y,40,0*Math.PI/180,360*Math.PI/180,!1),t.fillStyle="blue",t.fill(),t.strokeStyle="purple",t.lineWidth=8,t.stroke()}}class y extends r{constructor(){super(),this.enemysList=[],this.deathCount=0,this.production=setInterval(()=>{const t=new u;this.setListener(t)},4e3),this.stopProduction(),this.enemysList.forEach(t=>{this.setListener(t)});const t=new p;this.setListener(t)}setListener(t){t.addEventListener("death",e=>{this.enemysList=this.enemysList.filter(e=>e!=t),this.deathCount++,this.produceBoss(),7==this.deathCount&&this.dispatchEvent(new Event("clearGame"))}),t.addEventListener("addScore",t=>{this.dispatchEvent(new CustomEvent("addScore",{detail:t.detail}))})}stopProduction(){setTimeout(()=>{clearInterval(this.production,2e4)},2e4)}produceBoss(){if(6==this.deathCount){const t=new g;this.setListener(t)}}update(){}}const v=document.createElement("canvas");function m(){v.width=900,v.height=600}document.body.appendChild(v),window.addEventListener("resize",m),m(),new class{constructor(t){this.canvas=t,console.log(t),this.player=new l,this.player.addEventListener("currentHP",()=>{this.ui.showGameOver()}),this.enemyManager=new y,this.enemyManager.addEventListener("addScore",t=>{this.ui.addScore(t.detail)}),this.enemyManager.addEventListener("clearGame",t=>{this.ui.showClearGame()}),this.ui=new c}}(v),h.startAnimationFrame(v)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL0NvbW1vbi9FbnRlckZyYW1lLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9Db21tb24vQ29tbW9uQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvVmlldy9Vbml0QmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvVXRpbC9IaXRUZXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9WaWV3L0J1bGxldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvVmlldy9QbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL1ZpZXcvVUkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL1ZpZXcvRW5lbXkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL1ZpZXcvRW5lbXkyLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9WaWV3L0VuZW15My5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvTWFuYWdlci9FbmVteU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9NYW5hZ2VyL01haW5NYW5hZ2VyLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiRW50ZXJGcmFtZSIsIkV2ZW50VGFyZ2V0Iiwic3VwZXIiLCJ0aGlzIiwidGFyZ2V0cyIsImNvbnRleHQiLCJjYW52YXMiLCJnZXRDb250ZXh0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmVuZGVyIiwiY2xlYXJSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJmb3JFYWNoIiwidGFyZ2V0IiwiZHJhdyIsInVwZGF0ZSIsInB1c2giLCJjb25zb2xlIiwibG9nIiwiY29uc3RydWN0b3IiLCJmaWx0ZXIiLCJpdGVtIiwiYWRkVGFyZ2V0cyIsInJlbW92ZVRhcmdldHMiLCJIUCIsIngiLCJ5IiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50Iiwic2VsZiIsImNsYXNzTmFtZSIsInJlc3VsdCIsImxlbmd0aCIsImhpdFJlY3QiLCJDdXN0b21FdmVudCIsImRldGFpbCIsInNvbWUiLCJ0YXJnZXRBIiwidGFyZ2V0QiIsImhpdFgiLCJoaXRZIiwiZGFtYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJkZXN0cm95Iiwic3BlZWQiLCJiZWdpblBhdGgiLCJhcmMiLCJNYXRoIiwiUEkiLCJmaWxsU3R5bGUiLCJmaWxsIiwic3Ryb2tlIiwibW92ZVNwZWVkIiwiaXNMZWZ0IiwiaXNSaWdodCIsImlzVXAiLCJpc0Rvd24iLCJ0aHJvd0J1bGxldCIsInNldEhQIiwic2V0V2lkdGgiLCJzZXRIZWlnaHQiLCJ3aW5kb3ciLCJrZXl1cCIsImtleWRvd24iLCJrZXlfY29kZSIsImtleUNvZGUiLCJzZXRTcGVlZCIsImJ1bGxldCIsImdldEhpdE9iamVjdEJ5Q2xhc3NOYW1lIiwic2V0RGFtYWdlIiwiZGVhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJjbG9zZVBhdGgiLCJzdHJva2VTdHlsZSIsInNjb3JlIiwiaXNHYW1lT3ZlciIsImlzQ2xlYXJHYW1lIiwiZm9udCIsImZpbGxUZXh0IiwiY3Jhc2hTY29yZSIsIm5JZCIsInNldEludGVydmFsIiwiZGVnIiwiY29zIiwiZGlzYXBwZWFyIiwic3RvcEJ1bGxldCIsImNsZWFySW50ZXJ2YWwiLCJsaW5lV2lkdGgiLCJlbmVteXNMaXN0IiwiZGVhdGhDb3VudCIsInByb2R1Y3Rpb24iLCJlbmVteSIsInNldExpc3RlbmVyIiwic3RvcFByb2R1Y3Rpb24iLCJlbmVteTIiLCJlbmUiLCJwcm9kdWNlQm9zcyIsInNldFRpbWVvdXQiLCJlbmVteTMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJvblJlc2l6ZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInBsYXllciIsInVpIiwic2hvd0dhbWVPdmVyIiwiZW5lbXlNYW5hZ2VyIiwiYWRkU2NvcmUiLCJzaG93Q2xlYXJHYW1lIiwic3RhcnRBbmltYXRpb25GcmFtZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9C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ekMsS0FBS3lHLEdBQUdHLFNBQVNuRSxFQUFFUixVQVF2QmpDLEtBQUsyRyxhQUFhbkUsaUJBQWlCLFlBQWNDLElBQzdDekMsS0FBS3lHLEdBQUdJLGtCQU1aN0csS0FBS3lHLEdBQUssSUFBSSxJRGpDTixHQUNoQixFQUFXSyxvQkFBcUIiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIi8qKlxuICogRW50ZXJGcmFtZSByZXF1ZXN0QW5pbWF0aUZyYW1l5a6f6KGM44GX44CBXG4gKiDlkITjgqrjg5bjgrjjgqfjgq/jg4jjga51cGRhdGXjgahkcmF344Oh44K944OD44OJ44KSY2FsbOOBl+e2muOBkeOCi1xuICogc2luZ2xldG9uXG4gKiBcbiAqIOOBk+OBoeOCieOBr+OBhOOBmOOCi+W/heimgeOBr+OBguOCiuOBvuOBm+OCk+OAglxuICovXG5jbGFzcyBFbnRlckZyYW1lIGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIgKCk7XG4gICAgICAgIHRoaXMudGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSB7fTtcbiAgICB9XG4gICAgc3RhcnRBbmltYXRpb25GcmFtZSAoY2FudmFzKSB7XG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG4gICAgICAgIHRoaXMudGFyZ2V0cy5mb3JFYWNoKHRhcmdldCA9PiB7XG4gICAgICAgICAgICB0YXJnZXQuZHJhdyh0aGlzLmNvbnRleHQpO1xuICAgICAgICAgICAgdGFyZ2V0LnVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZGRUYXJnZXRzICh0YXJnZXQpIHtcbiAgICAgICAgdGhpcy50YXJnZXRzLnB1c2ggKHRhcmdldCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbYWRkXScsIHRhcmdldC5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICB9O1xuICAgIHJlbW92ZVRhcmdldHMgKHRhcmdldCkge1xuICAgICAgICB0aGlzLnRhcmdldHMgPSB0aGlzLnRhcmdldHMuZmlsdGVyICggaXRlbSA9PiBpdGVtICE9PSB0YXJnZXQpO1xuICAgICAgICBjb25zb2xlLmxvZygnW3JlbW92ZV0nLCB0YXJnZXQuY29uc3RydWN0b3IubmFtZSk7XG4gICAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IG5ldyBFbnRlckZyYW1lKCk7IiwiaW1wb3J0IEVudGVyRnJhbWUgZnJvbSBcImpzL0NvbW1vbi9FbnRlckZyYW1lXCI7XG5cbi8qKlxuICog5o+P55S757O744Gu5Z+65bqV44Kv44Op44K5XG4gKiB1cGRhdGXjgahkcmF344Oh44K944OD44OJ44KS44KC44Gh44CBXG4gKiDjgZPjga7kuozjgaTjga9yZXF1ZXN0QW5pbWF0aW9uRnJhbWXjgavjgojjgaPjgaZcbiAqIGNhbGzjgZXjgozntprjgZHjgotcbiAqIOS9v+eUqOOBl+OBn+OBhOWgtOWQiOOBr1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tb25CYXNlIGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIgKCk7XG4gICAgICAgIEVudGVyRnJhbWUuYWRkVGFyZ2V0cyAodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVudGVyRnJhbWUuanPjga7kuK3jgadcbiAgICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWXjgYvjgonoh6rli5XnmoTjgatjYWxs44GV44KM57aa44GR44G+44GZ44CCXG4gICAgICovXG4gICAgdXBkYXRlICgpIHt9XG4gICAgLyoqXG4gICAgICog5o+P55S7XG4gICAgICogQHBhcmFtIHtjb250ZXh0fSBjb250ZXh0IFxuICAgICAqL1xuICAgIGRyYXcgKGNvbnRleHQpIHt9XG4gICAgLyoqXG4gICAgICog6Ieq5L+h44KS5YmK6ZmkXG4gICAgICovXG4gICAgZGVzdHJveSAoKSB7XG4gICAgICAgIEVudGVyRnJhbWUucmVtb3ZlVGFyZ2V0cyAodGhpcyk7XG4gICAgICAgIGRlbGV0ZSB0aGlzO1xuICAgIH1cbn0iLCJpbXBvcnQgQ29tb25CYXNlIGZyb20gXCIuLi9Db21tb24vQ29tbW9uQmFzZVwiO1xuXG4vKipcbiAqIGVuZW1544KEcGxheWVy44Gu44OZ44O844K544Kv44Op44K544CCXG4gKiDlhbHpgJrjg5Hjg6njg6Hjg7zjgr/jga/jgZPjgaHjgonjgavlrprnvqnjgZfjgabkuIvjgZXjgYTjgIJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVW5pdEJhc2UgZXh0ZW5kcyBDb21vbkJhc2Uge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIgKCk7XG4gICAgICAgIHRoaXMuSFAgPSAwO1xuICAgICAgICB0aGlzLnggPSAwO1xuICAgICAgICB0aGlzLnkgPSAwO1xuICAgICAgICB0aGlzLndpZHRoID0gMDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDmj4/nlLtcbiAgICAgKiBAcGFyYW0ge2NvbnRleHR9IGNvbnRleHQgXG4gICAgICovXG4gICAgZHJhdyAoY29udGV4dCkge1xuICAgICAgICAvLyBvdmVycmlkZeOBl+OBpuOBj+OBoOOBleOBhFxuICAgIH1cbiAgICAvKipcbiAgICAgKiDkvZPliptcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgXG4gICAgICovXG4gICAgc2V0SFAgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuSFAgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuSFAgPD0gMCkge1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnZGVhdGgnKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICog44OA44Oh44O844K4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIFxuICAgICAqL1xuICAgIHNldERhbWFnZSAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5IUCAtPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog5bmFXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIFxuICAgICAqL1xuICAgIHNldFdpZHRoICh2YWx1ZSkge1xuICAgICAgICB0aGlzLndpZHRoID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOmrmOOBlVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBcbiAgICAgKi9cbiAgICBzZXRIZWlnaHQgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdmFsdWU7XG4gICAgfVxufSIsImltcG9ydCBFbnRlckZyYW1lIGZyb20gXCJqcy9Db21tb24vRW50ZXJGcmFtZVwiO1xuXG4vKipcbiAqIOihneeqgeWIpOWumlV0aWxpdHlcbiAqIHNpbmdsZXRvblxuICovXG5jbGFzcyBIaXRUZXN0IGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICAgIC8qKlxuICAgICAqIHZpZXfjgqrjg5bjgrjjgqfjgq/jg4jjga7ooZ3nqoHliKTlrprjgZfjgb7jgZlcbiAgICAgKiBAcGFyYW0ge3RoaXN9IHNlbGYgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSBcbiAgICAgKi9cbiAgICBnZXRIaXRPYmplY3RCeUNsYXNzTmFtZSAoc2VsZiwgY2xhc3NOYW1lKXtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgIGNvbnN0IHRhcmdldHMgPSBFbnRlckZyYW1lLnRhcmdldHMuZmlsdGVyICh0YXJnZXQgPT4gdGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWUgPT09IGNsYXNzTmFtZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGFyZ2V0c1tpXTtcbiAgICAgICAgICAgIGlmKHRoaXMuaGl0UmVjdChzZWxmLCB0YXJnZXQpKXtcbiAgICAgICAgICAgICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQgKCdoaXRSZWN0Jywge2RldGFpbDogc2VsZn0pKTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0YXJnZXQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICog6Ieq5YiG6Ieq6Lqr44Go5L2V44GL44Gu6KGd56qB44KS5Yik5a6a44GZ44KLXG4gICAgICogQHBhcmFtIHt0aGlzfSBzZWxmIFxuICAgICAqL1xuICAgIGhpdE90aGVyIChzZWxmKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgRW50ZXJGcmFtZS50YXJnZXRzXG4gICAgICAgIC5maWx0ZXIgKHRhcmdldCA9PiBzZWxmICE9PSB0YXJnZXQpXG4gICAgICAgIC5zb21lKHRhcmdldCA9PiB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmhpdFJlY3Qoc2VsZiwgdGFyZ2V0KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBoaXRYICh0YXJnZXRBLCB0YXJnZXRCKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRBLnggKyAodGFyZ2V0QS53aWR0aC8yKSA+IHRhcmdldEIueCAmJiB0YXJnZXRBLnggLSAodGFyZ2V0QS53aWR0aC8yKSA8IHRhcmdldEIueDtcbiAgICB9XG4gICAgaGl0WSAodGFyZ2V0QSwgdGFyZ2V0Qikge1xuICAgICAgICByZXR1cm4gdGFyZ2V0QS55ICsgKHRhcmdldEEuaGVpZ2h0LzIpID4gdGFyZ2V0Qi55ICYmIHRhcmdldEEueSAtICh0YXJnZXRBLmhlaWdodC8yKSA8IHRhcmdldEIueTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogdmlld+OCquODluOCuOOCp+OCr+ODiOWQjOWjq+OBruefqeW9ouihneeqgeWIpOWumlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRBIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRCIFxuICAgICAqL1xuICAgIGhpdFJlY3QgKHRhcmdldEEsIHRhcmdldEIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGl0WCh0YXJnZXRBLCB0YXJnZXRCKSAmJiB0aGlzLmhpdFkodGFyZ2V0QSwgdGFyZ2V0Qik7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgbmV3IEhpdFRlc3QgKCk7IiwiaW1wb3J0IENvbW1vbkJhc2UgZnJvbSBcImpzL0NvbW1vbi9Db21tb25CYXNlXCI7XG5cbi8qKlxuICog5by+44Gu44OZ44O844K544Kv44Op44K5XG4gKiDjgZ3jga7jgb7jgb7kvb/nlKjjgZfjgabjgoLjgYTjgYTjgZfjgIFcbiAqIOmBleOBhueorumhnuOBruW8vuOCkuS9nOOCiuOBn+OBhOWgtOWQiOOAgeOBk+OBoeOCieOCkuikh+ijveOBl+OBpuS4i+OBleOBhOOAglxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdWxsZXQgZXh0ZW5kcyBDb21tb25CYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAoeCwgeSkge1xuICAgICAgICBzdXBlciAoKTtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy5kYW1hZ2UgPSAxMDtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdoaXRSZWN0JywgKGUsIHMpPT57XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnaGl0JywgZS5kZXRhaWwpO1xuICAgICAgICAgICAgdGhpcy5kZXN0cm95ICgpO1xuICAgICAgICB9KVxuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjg5Tjg7zjg4lcbiAgICAgKiBcbiAgICAgKiBcbiAgICAgKiBcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgXG4gICAgICovXG4gICAgc2V0U3BlZWQgKHZhbHVlKSB7XG4gICAgICAgIC8vIHNwZWVk44Go44GE44GG44Kv44Op44K544Oh44Oz44OQ44GrdmFsdWXjgpLjgrvjg4Pjg4jjgZfjgabjgY/jgaDjgZXjgYRcbiAgICAgICAgdGhpcy5zcGVlZCA9IHZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBWZWN0b3IyZCAg5L2Z5Yqb44GM44GC44KM44Gw6Kit5a6a44GX44Gm44GP44Gg44GV44GEXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHggXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHkgXG4gICAgICovXG4gICAgc2V0VmVjdG9yICh4LCB5KSB7XG4gICAgICAgIC8vIHZlY3RvcuOBqOOBhOOBhuOCr+ODqeOCueODoeODs+ODkOOCquODluOCuOOCp+OCr+ODiOOBq3ZhbHVl44KS44K744OD44OI44GX44Gm44GP44Gg44GV44GEXG4gICAgfVxuICAgIC8qKlxuICAgICAqIOS4juOBiOOCi+ODgOODoeODvOOCuOWApFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBcbiAgICAgKi9cbiAgICBzZXREYW1hZ2UgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGFtYWdlID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVudGVyRnJhbWUuanPjga7kuK3jgadcbiAgICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWXjgYvjgonoh6rli5XnmoTjgatjYWxs44GV44KM57aa44GR44G+44GZ44CCXG4gICAgICovXG4gICAgdXBkYXRlICgpIHtcbiAgICAgICAgLy8gc3BlZWTjgaggdmVjdG9y44GL44KJ44CB5by+44KS56e75YuV44GV44Gb44Gm44GP44Gg44GV44GEXG4gICAgICAgIC8vdGhpcy54ICs9ID9cbiAgICAgICAgLy90aGlzLnkgKz0gP1xuICAgICAgICB0aGlzLnggKz0gdGhpcy5zcGVlZDtcblxuICAgICAgICAvLyBjYW52YXPjga7lpJbjgavlh7rjgabjgZfjgb7jgaPjgZ/jgonjgIFkZXN0cm95KCnjgZnjgovjgojjgYbntYTjgpPjgafkuIvjgZXjgYTjgIJcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvL7jga7mj4/nlLtcbiAgICAgKiBAcGFyYW0ge2N0eH0gY29udGV4dCBcbiAgICAgKi9cbiAgICBkcmF3IChjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoICgpO1xuICAgICAgICBjb250ZXh0LmFyYyAoIHRoaXMueCwgdGhpcy55LCAyLCAwICogTWF0aC5QSSAvIDE4MCwgMzYwICogTWF0aC5QSSAvIDE4MCwgZmFsc2UgKSA7XG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gXCJyZ2JhKDI1NSwgMjU1LCAwLCAxKVwiIDtcbiAgICAgICAgY29udGV4dC5maWxsICgpO1xuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgIH1cbn0iLCJpbXBvcnQgVW5pdEJhc2UgZnJvbSBcImpzL1ZpZXcvVW5pdEJhc2VcIjtcbmltcG9ydCBIaXRUZXN0IGZyb20gXCJqcy9VdGlsL0hpdFRlc3RcIjtcbmltcG9ydCBCdWxsZXQgZnJvbSBcImpzL1ZpZXcvQnVsbGV0XCI7IC8vIGJ1bGxldOOCkm5ld+OBmeOCi+OBn+OCgeOBq+S6i+WJjeOBq2ltcG9ydFxuXG4vKipcbiAqIOiHquapn+OCr+ODqeOCuVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5ZXIgZXh0ZW5kcyBVbml0QmFzZSB7XG5cbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyICgpO1xuICAgICAgICB0aGlzLnggPSAxMDA7XG4gICAgICAgIHRoaXMueSA9IDIwMDtcbiAgICAgICAgdGhpcy5tb3ZlU3BlZWQgPSA1O1xuICAgICAgICB0aGlzLmlzTGVmdCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzUmlnaHQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1VwID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNEb3duID0gZmFsc2U7XG4gICAgICAgIHRoaXMudGhyb3dCdWxsZXQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZXRIUCgxMDApO1xuICAgICAgICB0aGlzLnNldFdpZHRoKDQwKTsgLy/lvZPjgZ/jgorliKTlrprjga7jgqjjg6rjgqJcbiAgICAgICAgdGhpcy5zZXRIZWlnaHQoNDApO1xuXG4gICAgICAgIC8vIOOCreODvOaTjeS9nFxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZSkgPT4gdGhpcy5rZXl1cChlKSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGUpID0+IHRoaXMua2V5ZG93bihlKSk7XG4gICAgfVxuXG4gICAga2V5dXAgKGUpIHtcblxuICAgICAgICAvL+efouWNsOOCreODvOaTjeS9nFxuICAgICAgICBjb25zdCBrZXlfY29kZSA9IGUua2V5Q29kZTtcbiAgICAgICAgaWYgKGtleV9jb2RlID09PSAzNykgdGhpcy5pc0xlZnQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGtleV9jb2RlID09PSAzOCkgdGhpcy5pc1VwID0gZmFsc2U7XG4gICAgICAgIGlmIChrZXlfY29kZSA9PT0gMzkpIHRoaXMuaXNSaWdodCA9IGZhbHNlO1xuICAgICAgICBpZiAoa2V5X2NvZGUgPT09IDQwKSB0aGlzLmlzRG93biA9IGZhbHNlO1xuXG4gICAgICAgIC8v44K544Oa44O844K544Kt44O85pON5L2c77yI5by+5Li477yJXG4gICAgICAgaWYgKGtleV9jb2RlID09PSAzMikgdGhpcy50aHJvd0J1bGxldCA9IGZhbHNlO1xuXG4gICAgfVxuXG4gICAga2V5ZG93biAoZSkge1xuXG4gICAgICAgIC8v55+i5Y2w44Kt44O85pON5L2cXG4gICAgICAgIGNvbnN0IGtleV9jb2RlID0gZS5rZXlDb2RlO1xuICAgICAgICBpZiAoa2V5X2NvZGUgPT09IDM3KSB0aGlzLmlzTGVmdCA9IHRydWU7XG4gICAgICAgIGlmIChrZXlfY29kZSA9PT0gMzgpIHRoaXMuaXNVcCA9IHRydWU7XG4gICAgICAgIGlmIChrZXlfY29kZSA9PT0gMzkpIHRoaXMuaXNSaWdodCA9IHRydWU7XG4gICAgICAgIGlmIChrZXlfY29kZSA9PT0gNDApIHRoaXMuaXNEb3duID0gdHJ1ZTtcblxuICAgICAgICAvL+OCueODmuODvOOCueOCreODvOaTjeS9nO+8iOW8vuS4uO+8iVxuICAgICAgICBpZiAoa2V5X2NvZGUgPT09IDMyKSB0aGlzLnRocm93QnVsbGV0ID0gdHJ1ZTtcblxuICAgIH1cblxuICAgIGRlYXRoICgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW50ZXJGcmFtZS5qc+OBruS4reOBp1xuICAgICAqIHJlcXVlc3RBbmltYXRpb25GcmFtZeOBi+OCieiHquWLleeahOOBq2NhbGzjgZXjgozntprjgZHjgb7jgZnjgIJcbiAgICAgKi9cbiAgICB1cGRhdGUgKCkge1xuICAgICAgICAvLyDnn6LljbDjgq3jg7zjgIDihpDihpHihpLihpPjgafli5XjgY/jgojjgYbjgavjgZfjgabjgY/jgaDjgZXjgYTjgIJnb29nbGXjgafjgIxqcyBrZXljb2Rl44CN44Gq44Gp5qSc57Si44GX44Gm44G/44Gm5LiL44GV44GE44CCXG5cbiAgICAgICAgaWYgKHRoaXMuaXNMZWZ0KSB0aGlzLnggLT0gdGhpcy5tb3ZlU3BlZWQ7XG4gICAgICAgIGlmICh0aGlzLmlzUmlnaHQpIHRoaXMueCArPSB0aGlzLm1vdmVTcGVlZDtcbiAgICAgICAgaWYgKHRoaXMuaXNVcCkgdGhpcy55IC09IHRoaXMubW92ZVNwZWVkO1xuICAgICAgICBpZiAodGhpcy5pc0Rvd24pIHRoaXMueSArPSB0aGlzLm1vdmVTcGVlZDtcblxuICAgICAgICAvLyDjgrnjg5rjg7zjgrnjgq3jg7zjgpLmirzjgZnjgahCdWxsZXTjgYznmbrlsITjgZXjgozjgovjgojjgYbjgavjgZfjgabkuIvjgZXjgYTjgIJcbiAgICAgICAgLy8gRW5lbXnjgq/jg6njgrnjgpLlj4LogIPjgavjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICAgICAgaWYgKHRoaXMudGhyb3dCdWxsZXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ1bGxldCA9IG5ldyBCdWxsZXQgKHRoaXMueCArIDUwLCB0aGlzLnkpO1xuICAgICAgICAgICAgYnVsbGV0LnNldFNwZWVkKDcpO1xuICAgICAgICAgICAgdGhpcy50aHJvd0J1bGxldCA9IGZhbHNlOyBcbiAgICAgICAgfVxuIFxuICAgICAgICAgLy8g5pW144Gu5by+44Gr5b2T44Gf44Gj44Gf44KJ44OA44Oh44O844K444KS5Y+X44GR44KL44KI44GG44Gr44GX44Gm5LiL44GV44GE44CCXG4gICAgICAgIGNvbnN0IGJ1bGxldCA9IEhpdFRlc3QuZ2V0SGl0T2JqZWN0QnlDbGFzc05hbWUodGhpcywgXCJCdWxsZXRcIik7XG4gICAgICAgIGlmKGJ1bGxldCkge1xuICAgICAgICAgICAgLy8g44OA44Oh44O844K444KS5LiO44GI44Gm5LiL44GV44GE44CC4oaT44Kz44Oh44Oz44OI44Ki44Km44OI44KS5aSW44GX44Gm44GE44Gf44Gg44GP44Gn44GZ44GMd1xuICAgICAgICAgICAgdGhpcy5zZXREYW1hZ2UgKGJ1bGxldC5kYW1hZ2UpO1xuICAgICAgICAgICAgLy8g4oaR44GV44Gm44CBc2V0RGFtYWdl44Gv44Gp44GT44Gn5a6a576p44GV44KM44Gm44GE44KL44Gn44GX44KH44GG44GL77yfXG5cbiAgICAgICAgICAgIC8vIEhQ44GMMOOBq+OBquOBo+OBn+OCieatu+S6oeeKtuaFi+OBq+OBl+OAgU1haW5NYW5hZ2XjgavpgJrnn6XjgZfjgabkuIvjgZXjgYTjgIJcbiAgICAgICAgICAgIC8vIOOBneOBl+OBpuOAgU1haW5NYW5hZ2Vy5YG044Gr44CB44Gd44Gu6YCa55+l44KS5Y+X44GR5Y+W44KM44KL44KI44GG44Gr44GX44Gm5LiL44GV44GE44CCXG4gICAgICAgICAgICBpZiAodGhpcy5IUCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY3VycmVudEhQJykpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVhdGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOapn+S9k+aPj+eUu1xuICAgICAqIOS4ieinkuW9olxuICAgICAqIEBwYXJhbSB7Y3R4fSBjb250ZXh0IFxuICAgICAqL1xuICAgIGRyYXcgKGNvbnRleHQpIHtcblx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xuXHRcdGNvbnRleHQubW92ZVRvKHRoaXMueCAtIDIwLCB0aGlzLnkgKyAxMCk7IFxuXHRcdGNvbnRleHQubGluZVRvKHRoaXMueCArIDIwLCB0aGlzLnkpO1xuXHRcdGNvbnRleHQubGluZVRvKHRoaXMueCAtIDIwLCB0aGlzLnkgLSAxMCk7XG5cdFx0Y29udGV4dC5jbG9zZVBhdGgoKTtcblxuXHRcdGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBcInJnYigwLDAsMClcIjsgLy/mnqDnt5rjga7oibJcblx0XHRjb250ZXh0LnN0cm9rZSgpO1xuXG5cdFx0Y29udGV4dC5maWxsU3R5bGU9XCJyZ2JhKDAsMCwyNTUsIDEpXCI7Ly/loZfjgorjgaTjgbbjgZfjga7oibJcblx0XHRjb250ZXh0LmZpbGwoKTtcbiAgICB9XG59IiwiaW1wb3J0IENvbW1vbkJhc2UgZnJvbSBcIi4uL0NvbW1vbi9Db21tb25CYXNlXCI7XG5cbi8qKlxuICogVUnjga7mj4/nlLvjgq/jg6njgrlcbiAqIOOCueOCs+OCouS7peWkluOBq+OCglxuICog6Ieq5qmf44Gu5L2T5YqbXG4gKiDntYzpgY7mmYLplpPjgoRcbiAqIOOCr+ODquOCouihqOekuuOAgeOCsuODvOODoOOCquODvOODkOODvOOBquOBqeOCguS9nOOBo+OBpuOBv+OBpuS4i+OBleOBhOOAglxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVSSBleHRlbmRzIENvbW1vbkJhc2Uge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIgKCk7XG4gICAgICAgIHRoaXMuc2NvcmUgPSAwO1xuICAgICAgICB0aGlzLmlzR2FtZU92ZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0NsZWFyR2FtZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIOOCueOCs+OCouOCkuWil+OChOOBmVxuICAgIGFkZFNjb3JlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2NvcmUgKz0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueOCs+OColxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBcbiAgICAgKi9cbiAgICBzZXRTY29yZSAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5zY29yZSA9IHZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrLjg7zjg6Djgqrjg7zjg5Djg7xcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgXG4gICAgICovXG4gICAgc2hvd0dhbWVPdmVyICgpIHtcbiAgICAgICAgdGhpcy5pc0dhbWVPdmVyID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyDjgq/jg6rjgqLjgrLjg7zjg6BcbiAgICBzaG93Q2xlYXJHYW1lICgpIHtcbiAgICAgICAgdGhpcy5pc0NsZWFyR2FtZSA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5o+P55S7XG4gICAgICogQHBhcmFtIHtjb250ZXh0fSBjb250ZXh0IFxuICAgICAqL1xuICAgIGRyYXcgKGNvbnRleHQpIHtcblxuICAgICAgICAvL1NDT1JF44Gu6KGo56S6XG4gICAgICAgIGNvbnRleHQuZm9udCA9IFwiYm9sZCA5cHggJ+OCtOOCt+ODg+OCrydcIjtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBcInJnYigyNTUsIDE2OSwgMClcIjtcbiAgICAgICAgY29udGV4dC5maWxsVGV4dChcIlNDT1JFIDogXCIgKyB0aGlzLnNjb3JlLCAxMCwgMTApO1xuXG4gICAgICAgIC8vR0FNRSBPVkVS44Gu6KGo56S6XG4gICAgICAgIGlmKHRoaXMuaXNHYW1lT3ZlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gY29udGV4dC5maWxsU3R5bGUgPSBcInJnYigwLCAwLCAwKVwiO1xuICAgICAgICAgICAgY29udGV4dC5mb250ID0gXCJib2xkIDMwcHggJ+OCtOOCt+ODg+OCrydcIjtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQoXCJHQU1FIE9WRVJcIiwgMjAwLCAyMDApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2xlYXIgR2FtZeOBruihqOekulxuICAgICAgICBpZih0aGlzLmlzQ2xlYXJHYW1lID09PSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBjb250ZXh0LmZpbGxTdHlsZSA9IFwicmdiKDAsIDAsIDApXCI7XG4gICAgICAgICAgICBjb250ZXh0LmZvbnQgPSBcImJvbGQgMzBweCAn44K044K344OD44KvJ1wiO1xuICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dChcIkNsZWFyIEdBTUVcIiwgMjAwLCAyMDApO1xuICAgICAgICB9XG5cblxuXG4gICAgfVxufSIsImltcG9ydCBVbml0QmFzZSBmcm9tIFwiLi9Vbml0QmFzZVwiO1xuaW1wb3J0IEJ1bGxldCBmcm9tIFwiLi9CdWxsZXRcIjtcbmltcG9ydCBIaXRUZXN0IGZyb20gXCIuLi9VdGlsL0hpdFRlc3RcIjtcblxuLyoqXG4gKiDmlbXjga5CYXNl44Kv44Op44K544CCXG4gKiDmlrDopo/jga7mlbXjgpLkvZzjgovloLTlkIjjga/jgZPjga7jgq/jg6njgrnjgpLntpnmib/jgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW5lbXkgZXh0ZW5kcyBVbml0QmFzZSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlciAoKTtcbiAgICAgICAgdGhpcy54ID0gNDAwO1xuICAgICAgICB0aGlzLnkgPSAyMDA7XG4gICAgICAgIHRoaXMuc2V0SFAoNSk7XG4gICAgICAgIHRoaXMuc2V0V2lkdGgoNDApO1xuICAgICAgICB0aGlzLnNldEhlaWdodCg0MCk7XG4gICAgICAgIHRoaXMuY3Jhc2hTY29yZSA9IDEwOyAgXG4gICAgICAgIHRoaXMubklkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgLy8g5LiA5a6a6ZaT6ZqU44Gn5by+44KS55m65bCEXG4gICAgICAgICAgICBjb25zdCBidWxsZXQgPSBuZXcgQnVsbGV0ICh0aGlzLnggLSA0MCwgdGhpcy55KTtcbiAgICAgICAgICAgIGJ1bGxldC5zZXRTcGVlZCgtNCk7XG4gICAgICAgIH0sIDQwMClcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW50ZXJGcmFtZS5qc+OBruS4reOBp1xuICAgICAqIHJlcXVlc3RBbmltYXRpb25GcmFtZeOBi+OCieiHquWLleeahOOBq2NhbGzjgZXjgozntprjgZHjgb7jgZnjgIJcbiAgICAgKi9cbiAgICB1cGRhdGUgKCl7ICAgXG4gICAgICAgIC8vIOWLleOBjeOBr292ZXJyaWRl44GX44Gm5LiL44GV44GE44CC4oaT44Gu44K144Oz44OX44Or44Gv5LiK5LiL6YGL5YuVXG4gICAgICAgIHRoaXMuZGVnID0gdGhpcy5kZWcgfHwgMDtcbiAgICAgICAgdGhpcy55ID0gTWF0aC5jb3ModGhpcy5kZWcgKiAoTWF0aC5QSSAvIDE4MCkpICogMyArIHRoaXMueTtcbiAgICAgICAgdGhpcy5kZWcrKztcblxuICAgICAgICBjb25zdCBidWxsZXQgPSBIaXRUZXN0LmdldEhpdE9iamVjdEJ5Q2xhc3NOYW1lICh0aGlzLCBcIkJ1bGxldFwiKTtcbiAgICAgICAgaWYgKGJ1bGxldCkge1xuICAgICAgICAgICAgLy8g5by+44Gr44GC44Gf44Gj44Gf44KJ44OA44Oh44O844K444KS5LiO44GI44CBRW5lbXlNYW5hZ2Vy44Gr6YCa55+l44GX44Gm5LiL44GV44GE44CCXG4gICAgICAgICAgICAvLyBidWxsZXQuZGFtYWdlXG4gICAgICAgICAgICB0aGlzLnNldERhbWFnZSAoYnVsbGV0LmRhbWFnZSk7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuSFAgPD0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2RlYXRoJykpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzYXBwZWFyKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wQnVsbGV0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEVuZW15TWFuYWdlcuOBq+OBvuOBmuOCueOCs+OCouOCkumAmuefpe+8iOW8leaVsOOCgua4oeOBl+OBn+OBhOOBruOBp0N1c3RvbUV2ZW5044Go44GZ44G544GN77yJXG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdhZGRTY29yZScsIHtkZXRhaWw6IHRoaXMuY3Jhc2hTY29yZX0pKTtcbiAgICAgICAgfSAgICBcblxuICAgIH1cblxuICAgIGRpc2FwcGVhcigpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7ICAgICAgICAgICAgICAgICAgICBcbiAgICB9XG5cbiAgICBzdG9wQnVsbGV0KCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMubklkKTsgICAgXG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIOaPj+eUu1xuICAgICAqIEBwYXJhbSB7Y29udGV4dH0gY29udGV4dCBcbiAgICAgKi9cbiAgICBkcmF3IChjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoICgpIDtcblxuICAgICAgICBjb250ZXh0LmFyYyggdGhpcy54LCB0aGlzLnksIDIwLCAwICogTWF0aC5QSSAvIDE4MCwgMzYwICogTWF0aC5QSSAvIDE4MCwgZmFsc2UgKSA7XG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gXCJyZ2JhKDI1NSwwLDAsMC44KVwiIDtcbiAgICAgICAgY29udGV4dC5maWxsKCkgO1xuXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBcInB1cnBsZVwiIDtcbiAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSA4IDtcbiAgICAgICAgY29udGV4dC5zdHJva2UoKSA7XG4gICAgfVxufVxuIiwiaW1wb3J0IFVuaXRCYXNlIGZyb20gXCIuL1VuaXRCYXNlXCI7XG5pbXBvcnQgQnVsbGV0IGZyb20gXCIuL0J1bGxldFwiO1xuaW1wb3J0IEhpdFRlc3QgZnJvbSBcIi4uL1V0aWwvSGl0VGVzdFwiO1xuaW1wb3J0IEVuZW15IGZyb20gXCIuL0VuZW15XCI7XG5cbi8qKlxuICog5pW144GuQmFzZeOCr+ODqeOCueOAglxuICog5paw6KaP44Gu5pW144KS5L2c44KL5aC05ZCI44Gv44GT44Gu44Kv44Op44K544KS57aZ5om/44GX44Gm44GP44Gg44GV44GE44CCXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVuZW15MiBleHRlbmRzIEVuZW15IHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIFxuICAgICAgICBzdXBlciAoKTtcbiAgICAgICAgdGhpcy54ID0gNDAwO1xuICAgICAgICB0aGlzLnkgPSAyMDA7XG4gICAgICAgIHRoaXMuc2V0SFAoNSk7XG4gICAgICAgIHRoaXMuc2V0V2lkdGgoNDApO1xuICAgICAgICB0aGlzLnNldEhlaWdodCg0MCk7XG4gICAgICAgIHRoaXMuY3Jhc2hTY29yZSA9IDEwOyAgXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5uSWQpO1xuICAgICAgICB0aGlzLm5JZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIC8vIOS4gOWumumWk+malOOBp+W8vuOCkueZuuWwhFxuICAgICAgICAgICAgY29uc3QgYnVsbGV0ID0gbmV3IEJ1bGxldCAodGhpcy54IC0gNDAsIHRoaXMueSk7XG4gICAgICAgICAgICBidWxsZXQuc2V0U3BlZWQoLTQpO1xuICAgICAgICB9LCA0MDApXG5cbiAgICB9XG4gICAgLyoqXG4gICAgICogRW50ZXJGcmFtZS5qc+OBruS4reOBp1xuICAgICAqIHJlcXVlc3RBbmltYXRpb25GcmFtZeOBi+OCieiHquWLleeahOOBq2NhbGzjgZXjgozntprjgZHjgb7jgZnjgIJcbiAgICAgKi9cbiAgICB1cGRhdGUgKCl7ICAgXG4gICAgICAgIC8vIOWLleOBjeOBr292ZXJyaWRl44GX44Gm5LiL44GV44GE44CC4oaT44Gu44K144Oz44OX44Or44Gv5LiK5LiL6YGL5YuVXG4gICAgICAgIHRoaXMuZGVnID0gdGhpcy5kZWcgfHwgMDtcbiAgICAgICAgdGhpcy55ID0gTWF0aC5jb3ModGhpcy5kZWcgKiAoTWF0aC5QSSAvIDE4MCkpICogMC44ICsgdGhpcy55O1xuICAgICAgICB0aGlzLmRlZysrO1xuXG4gICAgICAgIGNvbnN0IGJ1bGxldCA9IEhpdFRlc3QuZ2V0SGl0T2JqZWN0QnlDbGFzc05hbWUgKHRoaXMsIFwiQnVsbGV0XCIpO1xuICAgICAgICBpZiAoYnVsbGV0KSB7XG4gICAgICAgICAgICAvLyDlvL7jgavjgYLjgZ/jgaPjgZ/jgonjg4Djg6Hjg7zjgrjjgpLkuI7jgYjjgIFFbmVteU1hbmFnZXLjgavpgJrnn6XjgZfjgabkuIvjgZXjgYTjgIJcbiAgICAgICAgICAgIC8vIGJ1bGxldC5kYW1hZ2VcbiAgICAgICAgICAgIHRoaXMuc2V0RGFtYWdlIChidWxsZXQuZGFtYWdlKTtcblxuICAgICAgICAgICAgaWYodGhpcy5IUCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnZGVhdGgnKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhcHBlYXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BCdWxsZXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRW5lbXlNYW5hZ2Vy44Gr44G+44Ga44K544Kz44Ki44KS6YCa55+l77yI5byV5pWw44KC5rih44GX44Gf44GE44Gu44GnQ3VzdG9tRXZlbnTjgajjgZnjgbnjgY3vvIlcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2FkZFNjb3JlJywge2RldGFpbDogdGhpcy5jcmFzaFNjb3JlfSkpO1xuICAgICAgICB9ICAgIFxuXG4gICAgfVxuXG4gICAgZGlzYXBwZWFyKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTsgICAgICAgICAgICAgICAgICAgIFxuICAgIH1cblxuICAgIHN0b3BCdWxsZXQoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5uSWQpOyAgICBcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICog5o+P55S7XG4gICAgICogQHBhcmFtIHtjb250ZXh0fSBjb250ZXh0IFxuICAgICAqL1xuICAgIGRyYXcgKGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGggKCkgO1xuXG4gICAgICAgIGNvbnRleHQuYXJjKCB0aGlzLngsIHRoaXMueSwgMjAsIDAgKiBNYXRoLlBJIC8gMTgwLCAzNjAgKiBNYXRoLlBJIC8gMTgwLCBmYWxzZSApIDtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBcInJnYmEoMCwwLDAsMSlcIiA7XG4gICAgICAgIGNvbnRleHQuZmlsbCgpIDtcblxuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gXCJwdXJwbGVcIiA7XG4gICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gOCA7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCkgO1xuICAgIH1cbn1cbiIsImltcG9ydCBVbml0QmFzZSBmcm9tIFwiLi9Vbml0QmFzZVwiO1xuaW1wb3J0IEJ1bGxldCBmcm9tIFwiLi9CdWxsZXRcIjtcbmltcG9ydCBIaXRUZXN0IGZyb20gXCIuLi9VdGlsL0hpdFRlc3RcIjtcbmltcG9ydCBFbmVteSBmcm9tIFwiLi9FbmVteVwiO1xuXG4vKipcbiAqIOaVteOBrkJhc2Xjgq/jg6njgrnjgIJcbiAqIOaWsOimj+OBruaVteOCkuS9nOOCi+WgtOWQiOOBr+OBk+OBruOCr+ODqeOCueOCkue2meaJv+OBl+OBpuOBj+OBoOOBleOBhOOAglxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbmVteTMgZXh0ZW5kcyBFbmVteSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBcbiAgICAgICAgc3VwZXIgKCk7XG4gICAgICAgIHRoaXMueCA9IDQwMDtcbiAgICAgICAgdGhpcy55ID0gMjAwO1xuICAgICAgICB0aGlzLnNldEhQKDMwKTtcbiAgICAgICAgdGhpcy5zZXRXaWR0aCg0MCk7XG4gICAgICAgIHRoaXMuc2V0SGVpZ2h0KDQwKTtcbiAgICAgICAgdGhpcy5jcmFzaFNjb3JlID0gMzA7ICBcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLm5JZCk7XG4gICAgICAgIHRoaXMubklkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgLy8g5LiA5a6a6ZaT6ZqU44Gn5by+44KS55m65bCEXG4gICAgICAgICAgICBjb25zdCBidWxsZXQgPSBuZXcgQnVsbGV0ICh0aGlzLnggLSA0MCwgdGhpcy55KTtcbiAgICAgICAgICAgIGJ1bGxldC5zZXRTcGVlZCgtOCk7XG4gICAgICAgIH0sIDIwMClcblxuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbnRlckZyYW1lLmpz44Gu5Lit44GnXG4gICAgICogcmVxdWVzdEFuaW1hdGlvbkZyYW1l44GL44KJ6Ieq5YuV55qE44GrY2FsbOOBleOCjOe2muOBkeOBvuOBmeOAglxuICAgICAqL1xuICAgIHVwZGF0ZSAoKXsgICBcbiAgICAgICAgLy8g5YuV44GN44Gvb3ZlcnJpZGXjgZfjgabkuIvjgZXjgYTjgILihpPjga7jgrXjg7Pjg5fjg6vjga/kuIrkuIvpgYvli5VcbiAgICAgICAgdGhpcy5kZWcgPSB0aGlzLmRlZyB8fCAwO1xuICAgICAgICB0aGlzLnkgPSBNYXRoLmNvcyh0aGlzLmRlZyAqIChNYXRoLlBJIC8gMTgwKSkgKiA1ICsgdGhpcy55O1xuICAgICAgICB0aGlzLmRlZysrO1xuXG4gICAgICAgIGNvbnN0IGJ1bGxldCA9IEhpdFRlc3QuZ2V0SGl0T2JqZWN0QnlDbGFzc05hbWUgKHRoaXMsIFwiQnVsbGV0XCIpO1xuICAgICAgICBpZiAoYnVsbGV0KSB7XG4gICAgICAgICAgICAvLyDlvL7jgavjgYLjgZ/jgaPjgZ/jgonjg4Djg6Hjg7zjgrjjgpLkuI7jgYjjgIFFbmVteU1hbmFnZXLjgavpgJrnn6XjgZfjgabkuIvjgZXjgYTjgIJcbiAgICAgICAgICAgIC8vIGJ1bGxldC5kYW1hZ2VcbiAgICAgICAgICAgIHRoaXMuc2V0RGFtYWdlIChidWxsZXQuZGFtYWdlKTtcblxuICAgICAgICAgICAgaWYodGhpcy5IUCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnZGVhdGgnKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhcHBlYXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BCdWxsZXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRW5lbXlNYW5hZ2Vy44Gr44G+44Ga44K544Kz44Ki44KS6YCa55+l77yI5byV5pWw44KC5rih44GX44Gf44GE44Gu44GnQ3VzdG9tRXZlbnTjgajjgZnjgbnjgY3vvIlcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2FkZFNjb3JlJywge2RldGFpbDogdGhpcy5jcmFzaFNjb3JlfSkpO1xuICAgICAgICB9ICAgIFxuXG4gICAgfVxuXG4gICAgZGlzYXBwZWFyKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTsgICAgICAgICAgICAgICAgICAgIFxuICAgIH1cblxuICAgIHN0b3BCdWxsZXQoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5uSWQpOyAgICBcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICog5o+P55S7XG4gICAgICogQHBhcmFtIHtjb250ZXh0fSBjb250ZXh0IFxuICAgICAqL1xuICAgIGRyYXcgKGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGggKCkgO1xuXG4gICAgICAgIGNvbnRleHQuYXJjKCB0aGlzLngsIHRoaXMueSwgNDAsIDAgKiBNYXRoLlBJIC8gMTgwLCAzNjAgKiBNYXRoLlBJIC8gMTgwLCBmYWxzZSApIDtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBcImJsdWVcIiA7XG4gICAgICAgIGNvbnRleHQuZmlsbCgpIDtcblxuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gXCJwdXJwbGVcIiA7XG4gICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gOCA7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCkgO1xuICAgIH1cbn1cbiIsImltcG9ydCBFbmVteSBmcm9tIFwianMvVmlldy9FbmVteVwiO1xuaW1wb3J0IEVuZW15MiBmcm9tIFwianMvVmlldy9FbmVteTJcIjtcbmltcG9ydCBFbmVteTMgZnJvbSBcImpzL1ZpZXcvRW5lbXkzXCI7XG5pbXBvcnQgQ29tbW9uQmFzZSBmcm9tIFwianMvQ29tbW9uL0NvbW1vbkJhc2VcIjtcbi8qKlxuICog5pW144Om44OL44OD44OI44KS566h55CG44GZ44KL44Oe44ON44O844K444Oj44O844Kv44Op44K5XG4gKiBcbiAqIOacgOWIneOBrzHkvZPjgaDjgZHjgafjgY3jgabjgYTjgovjga7jgafku5bjgavjgoLopIfmlbDkvZPnlJ/miJDjgZfjgaZcbiAqIOODkOODquOCqOODvOOCt+ODp+ODs+OCkuS9nOOBo+OBpuS4i+OBleOBhOOAglxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbmVteU1hbmFnZXIgZXh0ZW5kcyBDb21tb25CYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAoKXtcbiAgICAgICAgc3VwZXIgKCk7XG4gICAgICAgIHRoaXMuZW5lbXlzTGlzdCA9IFtdOyAvLyBFbmVteeeuoeeQhumFjeWIl1xuICAgICAgICB0aGlzLmRlYXRoQ291bnQgPSAwO1xuXG4gICAgICAgIC8vIEVuZW15KOi1pCnjgpLkuIDlrprplpPpmpTjgac15L2T55Sf55SjXG4gICAgICAgIHRoaXMucHJvZHVjdGlvbiA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVuZW15ID0gbmV3IEVuZW15KCk7XG4gICAgICAgICAgICB0aGlzLnNldExpc3RlbmVyKGVuZW15KTtcbiAgICAgICAgfSwgNDAwMCk7XG5cbiAgICAgICAgdGhpcy5zdG9wUHJvZHVjdGlvbigpO1xuXG4gICAgICAgIHRoaXMuZW5lbXlzTGlzdC5mb3JFYWNoKGVuZW15ID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0TGlzdGVuZXIoZW5lbXkpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBFbmVteTIo6buSKVxuICAgICAgICBjb25zdCBlbmVteTIgPSBuZXcgRW5lbXkyKCk7XG4gICAgICAgIHRoaXMuc2V0TGlzdGVuZXIoZW5lbXkyKTtcblxuICAgIH1cblxuICAgIHNldExpc3RlbmVyKGVuZW15KSB7XG4gICAgICAgIC8vIEVuZW1544GM5q2744KT44Gg5pmC44Gu44Oq44K544OK44O8XG4gICAgICAgIGVuZW15LmFkZEV2ZW50TGlzdGVuZXIgKCdkZWF0aCcsIChlKSA9PiB7XG4gICAgICAgICAgICAvLyB0aGlzLmVuZW15c0xpc3TjgYvjgonmrbvjgpPjgaBlbmVteSDjgpLliYrpmaRcbiAgICAgICAgICAgIHRoaXMuZW5lbXlzTGlzdCA9IHRoaXMuZW5lbXlzTGlzdC5maWx0ZXIoZW5lID0+IGVuZSAhPSBlbmVteSk7XG5cbiAgICAgICAgICAgIC8vIOatu+S6oeaVsOOCkuOCq+OCpuODs+ODiFxuICAgICAgICAgICAgdGhpcy5kZWF0aENvdW50ICsrO1xuXG4gICAgICAgICAgICAvLyDlhajjgabjga7jgqjjg43jg5/jg7zjgYzmrbvjgpPjgaDjgajjgYTjgYbloLHlkYrjgpLlj5fjgZHjgZ/jgonlrp/ooYzjgZnjgovjga7jgafjgrPjg7zjg4njga/jgZPjgZNcbiAgICAgICAgICAgIHRoaXMucHJvZHVjZUJvc3MoKTtcblxuICAgICAgICAgICAgaWYodGhpcy5kZWF0aENvdW50ID09IDcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjbGVhckdhbWUnKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8g5by+44Gr5b2T44Gf44Gj44Gf5pmC44Gu44K544Kz44Ki6YCa55+l44KSRW5lbXnjgYvjgonlj5fjgZHlj5bjgotcbiAgICAgICAgLy8g44GV44KJ44GrTWFpbk1uYWdhZXLjgavloLHlkYrjgZnjgotcbiAgICAgICAgZW5lbXkuYWRkRXZlbnRMaXN0ZW5lcignYWRkU2NvcmUnLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnYWRkU2NvcmUnLCB7ZGV0YWlsOiBlLmRldGFpbH0pKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXG5cbiAgICB9XG5cbiAgICAvLyAyMDAwMOenkuOBpzXkvZPnlJ/nlKNcbiAgICBzdG9wUHJvZHVjdGlvbigpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMucHJvZHVjdGlvbiwgMjAwMDApO1xuICAgICAgICB9LCAyMDAwMCk7XG4gICAgfVxuXG4gICAgLy8g44Oc44K544KS5Ye654++44GV44Gb44KLXG4gICAgcHJvZHVjZUJvc3MgKCkge1xuICAgICAgICBpZih0aGlzLmRlYXRoQ291bnQgPT0gNikge1xuICAgICAgICAgICAgY29uc3QgZW5lbXkzID0gbmV3IEVuZW15MygpO1xuICAgICAgICAgICAgdGhpcy5zZXRMaXN0ZW5lcihlbmVteTMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEVudGVyRnJhbWUuanPjga7kuK3jgadcbiAgICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWXjgYvjgonoh6rli5XnmoTjgatjYWxs44GV44KM57aa44GR44G+44GZ44CCXG4gICAgICovXG4gICAgdXBkYXRlICgpIHtcbiAgICB9XG59IiwiaW1wb3J0IE1haW5NYW5hZ2VyIGZyb20gJ2pzL01hbmFnZXIvTWFpbk1hbmFnZXInO1xuaW1wb3J0IEVudGVyRnJhbWUgZnJvbSAnanMvQ29tbW9uL0VudGVyRnJhbWUnO1xuXG5jb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcblxuLy8gQ2FudmFz44KS55S76Z2i44GE44Gj44Gx44GE44Gr6KGo56S644GZ44KLXG5mdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgICBjYW52YXMud2lkdGggPSA5MDA7XG4gICAgY2FudmFzLmhlaWdodCA9IDYwMDtcbn1cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvblJlc2l6ZSk7XG5vblJlc2l6ZSgpO1xuXG5uZXcgTWFpbk1hbmFnZXIoY2FudmFzKTtcbkVudGVyRnJhbWUuc3RhcnRBbmltYXRpb25GcmFtZSAoY2FudmFzKTtcblxuLyoqXG4gKiBlbnRvcnkganPjgIDnibnjgavjgZPjgozjgpLjgYTjgZjjgovlv4XopoHjga/jgYLjgorjgb7jgZvjgpPjgIJcbiAqL1xuXG4iLCJpbXBvcnQgUGxheWVyIGZyb20gXCJqcy9WaWV3L1BsYXllclwiO1xuaW1wb3J0IFVJIGZyb20gXCJqcy9WaWV3L1VJXCI7XG5pbXBvcnQgRW5lbXlNYW5hZ2VyIGZyb20gXCJqcy9NYW5hZ2VyL0VuZW15TWFuYWdlclwiO1xuLy8gaW1wb3J0IENvbW1vbkJhc2UgZnJvbSBcImpzL0NvbW1vbi9Db21tb25CYXNlXCI7XG5cbi8qKlxuICogTWFpbk1hbmFnZXJcbiAqIOaMh+ekuuezu+e1seOBruODiOODg+ODl+OCr+ODqeOCuVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWluTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IgKGNhbnZhcyl7XG4gICAgICAgIFxuICAgICAgICAvLyBzdXBlciAoKTtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIGNvbnNvbGUubG9nKGNhbnZhcyk7XG4gICAgICAgIC8v6Ieq5qmf44KS55Sf5oiQ77yI44Kk44Oz44K544K/44Oz44K55YyW77yJ44GX44Gm44GE44G+44GZ44CCXG4gICAgICAgIC8vUGxheWVy44Kv44Op44K544Gr44Gm6Kqy6aGM44KS56K66KqN44GX44CB5YuV44GP44KI44GG44Gr44GX44Gf44KK44CB5by+44KS44Go44Gw44Gb44Gf44KKXG4gICAgICAgIC8v44GZ44KL44KI44GG44Gr44GX44Gm44GP44Gg44GV44GE44CCXG4gICAgICAgIHRoaXMucGxheWVyID0gbmV3IFBsYXllciAoKTtcblxuICAgICAgICAvL+atu+S6oeOBl+OBn+aZglxuICAgICAgICB0aGlzLnBsYXllci5hZGRFdmVudExpc3RlbmVyKCdjdXJyZW50SFAnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVpLnNob3dHYW1lT3ZlcigpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL+aVteOBruODnuODjeODvOOCuOODo+ODvOOCr+ODqeOCueOBp+OBmVxuICAgICAgICAvL0VuZW15TWFuYWdlcuOCr+ODqeOCueOBq+OBpuiqsumhjOOCkueiuuiqjeOBl+OAgeiJsuOAheOBquaVteOCkuS9nOOBo+OBn+OCiuOAgVxuICAgICAgICAvL+WItuW+oeOBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgICAgICB0aGlzLmVuZW15TWFuYWdlciA9IG5ldyBFbmVteU1hbmFnZXIgKCk7XG5cbiAgICAgICAgLy8g5by+44Gr5b2T44Gf44Gj44Gf5pmC44Gu44K544Kz44Ki6YCa55+l44KSZW5lbXlNYW5hZ2Vy44GL44KJ5Y+X44GR5Y+W44KLXG4gICAgICAgIHRoaXMuZW5lbXlNYW5hZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZFNjb3JlJywgKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMudWkuYWRkU2NvcmUoZS5kZXRhaWwpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyB0aGlzLmVuZW15TWFuYWdlci5hZGRFdmVudExpc3RlbmVyKCdhZGRCb3NzU2NvcmUnLCAoZSkgPT4ge1xuICAgICAgICAvLyAgICAgdGhpcy51aS5hZGRTY29yZShlLmRldGFpbCk7XG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgIC8vIOOCsuODvOODoOOCkuOCr+ODquOCouOBl+OBn+OBqOOBjVxuICAgICAgICB0aGlzLmVuZW15TWFuYWdlci5hZGRFdmVudExpc3RlbmVyKCdjbGVhckdhbWUnLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy51aS5zaG93Q2xlYXJHYW1lKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBcblxuICAgICAgICAvL1VJ44KS6KGo56S644GV44Gb44Gm5LiL44GV44GE44CCVUnjgq/jg6njgrnjgpLjgqTjg7Pjgrnjgr/jg7PjgrnljJbjgZXjgZvjgb7jgZnjgIJcbiAgICAgICAgLy/jga9WaWV344OV44Kp44Or44OA44Gr44GC44KK44G+44GZXG4gICAgICAgIHRoaXMudWkgPSBuZXcgVUkgKCk7IFxuXG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=