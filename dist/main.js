!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);class i extends EventTarget{constructor(){super(),this.targets=[],this.context={}}startAnimationFrame(t){this.canvas=t,this.context=t.getContext("2d"),requestAnimationFrame(()=>{this.render()})}render(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.targets.forEach(t=>{t.draw(this.context),t.update()}),requestAnimationFrame(()=>{this.render()})}addTargets(t){this.targets.push(t),console.log("[add]",t.constructor.name)}removeTargets(t){this.targets=this.targets.filter(e=>e!==t),console.log("[remove]",t.constructor.name)}}var r=new i;class n extends EventTarget{constructor(){super(),r.addTargets(this)}update(){}draw(t){}destroy(){r.removeTargets(this)}}class h extends n{constructor(){super(),this.HP=0,this.x=0,this.y=0,this.width=0,this.height=0}draw(t){}setHP(t){this.HP=t,this.HP<=0&&this.dispatchEvent(new Event("death"))}setDamage(t){this.HP-=t}setWidth(t){this.width=t}setHeight(t){this.height=t}}class a extends EventTarget{getHitObjectByClassName(t,e){let s=null;const i=r.targets.filter(t=>t.constructor.name===e);for(let e=0;e<i.length;e++){const r=i[e];if(this.hitRect(t,r)){r.dispatchEvent(new CustomEvent("hitRect",{detail:t})),s=r;break}}return s}hitOther(t){let e=!1;return r.targets.filter(e=>t!==e).some(s=>(e=this.hitRect(t,s),e)),e}hitX(t,e){return t.x+t.width/2>e.x&&t.x-t.width/2<e.x}hitY(t,e){return t.y+t.height/2>e.y&&t.y-t.height/2<e.y}hitRect(t,e){return this.hitX(t,e)&&this.hitY(t,e)}}var o=new a;class c extends h{constructor(){super(),this.x=100,this.y=200,this.setHP(100),this.setWidth(40),this.setHeight(40)}update(){o.getHitObjectByClassName(this,"Bullet")}draw(t){t.beginPath(),t.moveTo(this.x-20,this.y+10),t.lineTo(this.x+20,this.y),t.lineTo(this.x-20,this.y-10),t.closePath(),t.strokeStyle="rgb(0,0,0)",t.stroke(),t.fillStyle="rgba(0,0,255, 1)",t.fill()}}class l extends n{constructor(){super(),this.score=0}setScore(t){this.score=t}draw(t){t.fillStyle="rgb(255, 169, 0)",t.fillText("SCORE : "+this.score,10,10)}}class d extends n{constructor(t,e){super(),this.x=t,this.y=e,this.damage=10,this.addEventListener("hitRect",(t,e)=>{console.log("hit",t.detail),this.destroy()})}setSpeed(t){this.speed=t}setVector(t,e){}setDamage(t){this.damage=t}update(){this.x+=this.speed}draw(t){t.beginPath(),t.arc(this.x,this.y,2,0*Math.PI/180,360*Math.PI/180,!1),t.fillStyle="rgba(255, 255, 0, 1)",t.fill(),t.stroke()}}class u extends h{constructor(){super(),this.x=400,this.y=200,this.setHP(5),this.crashScore=10,setInterval(()=>{new d(this.x-10,this.y).setSpeed(-4)},400)}update(){this.deg=this.deg||0,this.y=3*Math.cos(this.deg*(Math.PI/180))+this.y,this.deg++;o.getHitObjectByClassName("Bullet")}draw(t){t.beginPath(),t.arc(this.x,this.y,20,0*Math.PI/180,360*Math.PI/180,!1),t.fillStyle="rgba(255,0,0,0.8)",t.fill(),t.strokeStyle="purple",t.lineWidth=8,t.stroke()}}class g extends n{constructor(){super(),this.enemysList=[],this.enemysList.push(new u),this.enemysList.forEach(t=>{t.addEventListener("death",e=>{this.enemysList=this.enemysList.filter(e=>e!=t)})})}update(){}}const y=document.createElement("canvas");function f(){y.width=innerWidth*devicePixelRatio,y.height=innerHeight*devicePixelRatio}document.body.appendChild(y),window.addEventListener("resize",f),f(),new class{constructor(t){this.canvas=t,console.log(t),this.player=new c,this.enemyManager=new g,new l}}(y),r.startAnimationFrame(y)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,